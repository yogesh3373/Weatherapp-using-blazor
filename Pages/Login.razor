@page "/login"
@using System.Text.Json
@using Supabase.Gotrue
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject Supabase.Client SupabaseClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="login-container">
    <div class="login-box">
        <h2>Welcome Back</h2>
        <p class="subtitle">Sign in to continue to WeatherApp</p>

        <div class="form-group">
            <label>Email*</label>
            <input type="email" @bind="Email" class="form-control" required />
        </div>

        <div class="form-group">
            <label>Password*</label>
            <input type="password" @bind="Password" class="form-control" required />
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">
                @ErrorMessage
            </div>
        }

        <button class="login-button" @onclick="LoginUser">
            Sign In
        </button>

        <div class="register-link">
            Don't have an account? <a href="/register">Create Account</a>
        </div>
    </div>
</div>

<style>
    /* .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #2c3e50;
    } */

    .login-box {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 600px;
        min-width: 400px;
        text-align: center;
    }

    h2 {
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .subtitle {
        color: #7f8c8d;
        margin-bottom: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
        text-align: left;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        color: #2c3e50;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #3498db;
    }

    .login-button {
        width: 100%;
        padding: 0.75rem;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        margin-top: 1rem;
    }

    .login-button:hover {
        background-color: #2980b9;
    }

    .error-message {
        color: #e74c3c;
        margin: 1rem 0;
        padding: 0.5rem;
        background-color: #fde8e8;
        border-radius: 4px;
    }

    .register-link {
        margin-top: 1.5rem;
        color: #7f8c8d;
    }

    .register-link a {
        color: #3498db;
        text-decoration: none;
    }

    .register-link a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private string Email = string.Empty;
    private string Password = string.Empty;
    private string ErrorMessage = string.Empty;

    private async Task LoginUser()
    {
        try
        {
            var result = await SupabaseClient.Auth.SignIn(Email, Password);

            if (result != null && !string.IsNullOrEmpty(result.AccessToken))
            {
                await LocalStorage.SetItemAsync("authToken", result.AccessToken);
                await LocalStorage.SetItemAsync("userEmail", Email);
                await LocalStorage.SetItemAsync("user", result.User);

                var userJson = await LocalStorage.GetItemAsStringAsync("user");
                if (!string.IsNullOrEmpty(userJson))
                {
                    var user = JsonSerializer.Deserialize<User>(userJson);
                    Console.WriteLine($"User Id: {user?.Email}");
                }

                Navigation.NavigateTo("/weather");
            }
            else
            {
                ErrorMessage = "Invalid login credentials.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
    }
}